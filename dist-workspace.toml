[workspace]
members = ["cargo:."]

# Config for 'dist'
[dist]
# The preferred dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.25.0-github-recross"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "powershell", "npm", "homebrew"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = ["aarch64-apple-darwin", "aarch64-unknown-linux-gnu", "aarch64-pc-windows-msvc", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc"]
# A namespace to use when publishing this package to the npm registry
npm-scope = "@mistydemeo"
# The npm package should have this name
npm-package = "cargodisttest"
# A GitHub repo to push Homebrew formulas to
tap = "mistydemeo/homebrew-cargodisttest"
# Plan jobs to run in CI
plan-jobs = ["./plan-greeter"]
# Local artifacts jobs to run in CI
local-artifacts-jobs = ["./local-build-greeter"]
# Global artifacts jobs to run in CI
global-artifacts-jobs = ["./global-build-greeter"]
# Host jobs to run in CI
host-jobs = ["./host-greeter"]
# Post-announce jobs to run in CI
post-announce-jobs = ["./post-announce-greeter"]
# Whether to publish prereleases to package managers
publish-prereleases = false
# Which actions to run on pull requests
pr-run-mode = "plan"
# Publish jobs to run in CI
publish-jobs = ["homebrew", "npm", "./publish-greeter"]
# Where to host releases
hosting = "github"
# Whether to install an updater program
install-updater = true
# Whether to enable GitHub Attestations
github-attestations = true
# Path that installers should place binaries in
install-path = "CARGO_HOME"
# Whether to sign macOS executables
macos-sign = true

[dist.aliases]
axolotlsay = ["cargodisttest"]

[dist.dependencies.homebrew]
cmake = '*'
libcue = "2.2.1"

[dist.dependencies.apt]
cmake = '*'
libcue-dev = '*'

[dist.dependencies.chocolatey]
lftp = '*'
cmake = '3.27.6'

[dist.github-custom-runners]
x86_64-unknown-linux-gnu = "ubuntu-latest"

[dist.github-custom-runners.aarch64-unknown-linux-gnu.container]
image = "quay.io/pypa/manylinux_2_28_x86_64"
host = "x86_64-unknown-linux-musl"

[dist.github-custom-runners.aarch64-pc-windows-msvc]
container = "messense/cargo-xwin"
